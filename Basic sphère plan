#j'ai pas de tab sur téléphone donc il y aura des >>



import matplotlib.pyplot as plt 
import numpy as np
import matplotlib.animation as anim
from mpl_toolkits.mplot3d import *



class sphere :        # pour faire une sphère
>> def __init__(self,x,y,z,radius)
>> >> self.x
>> >> self.Y
>> >> self.z
>> >> self.radius

class plan :   # pour faire un plan incliné
>> def __init__(self,x,y,z,u,v,w)

# point du plan
>> >> self.x
>> >> self.Y
>> >> self.z

# vecteur normal du plan
>> >> self.u
>> >> self.v
>> >> self.w

#pour l'équation de plan
#d= -plan.u*plan.x-plan.v*plan.y-plan.w*plan.z


#le plot

Ω=[
[sphere(0,0,1,1)], #spheres
[plan(0,0,0,0,0,1)]  #plans
] 

A = np.linspace(0, 2 * np.pi, 100)
B = np.linspace(0, np.pi, 100)
X = 10 * np.outer(np.cos(A), np.sin(V))
Y = 10 * np.outer(np.sin(A), np.sin(V))
Z = 10 * np.outer(np.ones(np.size(A)), np.cos(V))

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

S=[ax.plot_surface(i.r*X+i.x, i.r*Y+i.y, i.r*Z+i.z, color='b') for i in Ω[0]]

########début code


Def contact(plan,sph):
>> d= -plan.u*plan.x-plan.v*plan.y-plan.w*plan.z
>> if abs(sph.x*plan.u+sph.y*plan.v+sph.z*plan.w+d)/np.sqrt(plan.u**2+plan.v**2+plan.w**2)<=radius :
>> >> return True
>> return False

Def animation(i):
>>for i in Ω[0]:
>> >>for j in Ω[1]:
>> >> >> if contact(j,i): 
>> >> >> >> i.x+=j.u
>> >> >> >> i.y+=j.v
>> >> >> >> i.z+=j.w
>> >> i.z+=-1
>> >> S[i].set_data(i.r*X+i.x, i.r*Y+i.y, i.r*Z+i.z)
>> return S

ani = FuncAnimation(fig=fig, func=animation, frames=range(1000), interval=50, blit=True)

ani.save(filename="basicSpherePlan.mp4", dpi =80, fps=20)

